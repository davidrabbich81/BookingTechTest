@using BookingSystem.Data.Domain;
@using BookingSystem.Data.PostPutModels;
@using BookingSystem.Data.Repositories.Interface;
@using Microsoft.Extensions.DependencyInjection
@inject IServiceScopeFactory ScopeFactory

<div class="add-edit-booking">

    <form>
        <div class="form-group">
            <label for="inpName">Name</label>
            <input type="text" class="form-control" id="inpName" @bind="BookingData.Name" placeholder="Enter Name">
        </div>

        <div class="form-group">
            <label for="inpEmail">Email address</label>
            <input type="email" class="form-control" id="inpEmail" @bind="BookingData.EmailAddress" placeholder="Enter email">
        </div>

        <div class="form-group">
            <label for="inpContactNumber">Contact Number</label>
            <input type="text" class="form-control" id="inpContactNumber" @bind="BookingData.ContactNumber" placeholder="Enter number">
        </div>

        <div class="form-group">
            <label for="inpBookingDate">Booking date</label>
            <input type="date" class="form-control" id="inpBookingDate" @bind="BookingData.BookingDate" placeholder="Enter booking date">
        </div>

        <div class="form-group">
            <label for="inpFlexibility">Flexibility</label>
            <select class="form-control" id="inpFlexibility" @bind="BookingData.Flexibility">
                @foreach (var option in FlexibilityOptions)
                {
                    <option value="@option.Key">@option.Value</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="inpVehicleSize">Vehicle size</label>
            <select class="form-control" id="inpVehicleSize" @bind="BookingData.VehicleSize">
                @foreach (var option in VehicleSizeOptions)
                {
                    <option value="@option.Key">@option.Value</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary" @onclick="SubmitBooking">Submit booking</button>
    </form>


</div>


@code {

    /// <summary>
    /// The ID of the booking to load
    /// </summary>
    [Parameter]
    public Guid? BookingId { get; set; }

    /// <summary>
    /// The dropdown list source for the flexibility options
    /// </summary>
    public Dictionary<BookingFlexibility, string> FlexibilityOptions { get; set; } = 
        new Dictionary<BookingFlexibility, string>() { 
            { BookingFlexibility.ZeroDays, "Exact date only" },
            { BookingFlexibility.OneDay, "-/+ 1 day" },
            { BookingFlexibility.TwoDays, "-/+ 2 days" },
            { BookingFlexibility.ThreeDays, "-/+ 3 days" }
        };

    /// <summary>
    /// The dropdown list source for the Vehicle size options
    /// </summary>
    public Dictionary<VehicleSize, string> VehicleSizeOptions { get; set; } =
        new Dictionary<VehicleSize, string>() {
            { VehicleSize.Small, "Small" },
            { VehicleSize.Medium, "Medium" },
            { VehicleSize.Large, "Large" },
            { VehicleSize.Van, "Van" }
        };

    /// <summary>
    /// The booking data to be sent to the server
    /// </summary>
    public PostPutBooking BookingData { get; set; } = new PostPutBooking();

    protected override async Task OnInitializedAsync()
    {
        if (BookingId.HasValue)
        {
            using (var serviceScope = ScopeFactory.CreateScope())
            {
                var repo = serviceScope.ServiceProvider.GetService<IBookingRepository>();
                if (repo is not null)
                    BookingData = (await repo.GetBookingById(BookingId.Value)).ToPostPutModel();   
            }
        }
        else
        {
            BookingData = new PostPutBooking();
        }

    }

    public async Task SubmitBooking()
    {
        using (var serviceScope = ScopeFactory.CreateScope())
        {
            var repo = serviceScope.ServiceProvider.GetService<IBookingRepository>();
            if (repo is not null)
            {
                if (BookingId.HasValue)
                    await repo.UpdateBooking(BookingId.Value, BookingData);
                else
                    await repo.CreateNewBooking(BookingData);
            }
        }
    }

}
