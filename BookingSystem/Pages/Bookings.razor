@page "/bookings"
@using BookingSystem.Data.Repositories.Interface;
@using BookingSystem.Data.Domain;
@using Microsoft.Extensions.DependencyInjection
@inject IServiceScopeFactory ScopeFactory

<PageTitle>Bookings</PageTitle>

<h1>Bookings</h1>

@if (bookings == null)
{
    <p><em>Loading bookings...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Contact number</th>
                <th>Booking date</th>
                <th>Flexibility</th>
                <th>Vehicle size</th>
                <th>Confirmed</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td><a href="/booking/@booking.BookingId">@booking.Name</a></td>
                    <td>@booking.EmailAddress</td>
                    <td>@booking.ContactNumber</td>
                    <td>@booking.BookingDate</td>
                    <td>@booking.Flexibility</td>
                    <td>@booking.VehicleSize</td>
                    <td><span class="oi oi-@(booking.Confirmed ? "check" : "x")" aria-hidden="true"></span></td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ConfirmBooking(booking)">
                            <span class="oi oi-check" aria-hidden="true"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteBooking(booking)">
                            <span class="oi oi-circle-x" aria-hidden="true"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Booking>? bookings;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }

    public async Task LoadBookings()
    {
        using (var serviceScope = ScopeFactory.CreateScope())
        {
            var repo = serviceScope.ServiceProvider.GetService<IBookingRepository>();
            if (repo is not null)
                bookings = await repo.GetAllBookings();
        }
    }

    public async Task ConfirmBooking(Booking booking)
    {
        using (var serviceScope = ScopeFactory.CreateScope())
        {
            var repo = serviceScope.ServiceProvider.GetService<IBookingRepository>();
            if (repo is not null) {
                await repo.ConfirmBooking(booking.BookingId, !booking.Confirmed);
                await LoadBookings();
            }
        }
    }

    public async Task DeleteBooking(Booking booking)
    {
        using (var serviceScope = ScopeFactory.CreateScope())
        {
            var repo = serviceScope.ServiceProvider.GetService<IBookingRepository>();
            if (repo is not null)
            {
                await repo.DeleteBooking(booking.BookingId);
                await LoadBookings();
            }
        }
    }
}
